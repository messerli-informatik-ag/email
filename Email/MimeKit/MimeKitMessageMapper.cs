using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Funcky.Extensions;
using Messerli.Email.Time;
using MimeKit;
using ContentType = System.Net.Mime.ContentType;
using MimeKitContentType = MimeKit.ContentType;
using MimeKitMailboxAddress = MimeKit.MailboxAddress;
using MimeKitTextFormat = MimeKit.Text.TextFormat;

namespace Messerli.Email.MimeKit
{
    internal sealed class MimeKitMessageMapper : IMimeKitMessageMapper
    {
        private const string AutoSubmittedHeaderName = "Auto-Submitted";

        private readonly IMessageIdGenerator _messageIdGenerator;

        private readonly IDateTimeAccessor _dateTimeAccessor;

        private readonly IMultipartBoundaryGenerator _multipartBoundaryGenerator;

        public MimeKitMessageMapper(
            IMessageIdGenerator messageIdGenerator,
            IDateTimeAccessor dateTimeAccessor,
            IMultipartBoundaryGenerator multipartBoundaryGenerator)
        {
            _messageIdGenerator = messageIdGenerator;
            _dateTimeAccessor = dateTimeAccessor;
            _multipartBoundaryGenerator = multipartBoundaryGenerator;
        }

        [SuppressMessage("IDisposableAnalyzers.Correctness", "IDISP001: Dispose created", Justification = "Dispose action is returned")]
        public WithDisposeAction<MimeMessage> MapToMimeKitMessage(EmailMessage message)
        {
            var body = MapToMimeKitBody(message.BodyParts.ToImmutableList());

            var mimeMessage = new MimeMessage
            {
                Date = _dateTimeAccessor.Now,
                MessageId = _messageIdGenerator.GenerateMessageId(),
                Subject = message.Subject,
                From = { MapToMimeKitMailboxAddress(message.Sender) },
                Body = body.Value,
            };

            CopyAddressesToInternetAddressList(message.Recipients, mimeMessage.To);
            CopyAddressesToInternetAddressList(message.CarbonCopyRecipients, mimeMessage.Cc);
            CopyAddressesToInternetAddressList(message.BlindCarbonCopyRecipients, mimeMessage.Bcc);

            AddAutoGeneratedTypeHeader(message.AutoGenerationType, mimeMessage);

            return new WithDisposeAction<MimeMessage>(mimeMessage, body.Dispose);
        }

        private WithDisposeAction<MimeEntity> MapToMimeKitBody(IImmutableList<BodyPart> bodyParts)
            => bodyParts.Count switch
            {
                0 => new WithDisposeAction<MimeEntity>(new TextPart()),
                1 => MapToMimeKitPart(bodyParts.First()),
                _ => MapToMultipart(bodyParts),
            };

        private WithDisposeAction<MimeEntity> MapToMultipart(IEnumerable<BodyPart> bodyParts)
            => MapToContainerMimeEntity(
                new Multipart
                {
                    Boundary = _multipartBoundaryGenerator.GenerateBoundary(),
                },
                bodyParts);

        private WithDisposeAction<MimeEntity> MapToMultipartAlternative(IEnumerable<BodyPart> bodyParts)
            => MapToContainerMimeEntity(
                new MultipartAlternative
                {
                    Boundary = _multipartBoundaryGenerator.GenerateBoundary(),
                },
                bodyParts);

        private WithDisposeAction<MimeEntity> MapToContainerMimeEntity<TContainer>(TContainer container, IEnumerable<BodyPart> bodyParts)
            where TContainer : MimeEntity, ICollection<MimeEntity>
        {
            var mimeKitParts = bodyParts.Select(MapToMimeKitPart).ToImmutableList();
            mimeKitParts.Select(p => p.Value).ForEach(container.Add);
            return new WithDisposeAction<MimeEntity>(container, mimeKitParts.DisposeAll);
        }

        private WithDisposeAction<MimeEntity> MapToMimeKitPart(BodyPart bodyPart)
            => bodyPart.Match(
                attachment: CreateAttachment,
                html: html => new WithDisposeAction<MimeEntity>(new TextPart(MimeKitTextFormat.Html) { Text = html.Content }),
                plain: plain => new WithDisposeAction<MimeEntity>(new TextPart(MimeKitTextFormat.Plain) { Text = plain.Content }),
                alternatives: alternatives => MapToMultipartAlternative(alternatives.Children));

        [SuppressMessage("IDisposableAnalyzers.Correctness", "IDISP001: Dispose created", Justification = "Dispose action is returned")]
        private static WithDisposeAction<MimeEntity> CreateAttachment(BodyPart.Attachment attachment)
        {
            var stream = attachment.StreamFactory();
            var entity = new MimePart(MapToMimeKitContentType(attachment.ContentType))
            {
                Content = new MimeContent(stream),
                ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                ContentTransferEncoding = ContentEncoding.Base64,
                FileName = attachment.FileName,
            };
            return new WithDisposeAction<MimeEntity>(entity, stream.Dispose);
        }

        private static void AddAutoGeneratedTypeHeader(AutoGenerationType autoGenerationType, MimeMessage mimeMessage)
        {
            if (MapToAutoSubmittedHeaderValue(autoGenerationType) is { } headerValue)
            {
                mimeMessage.Headers[AutoSubmittedHeaderName] = headerValue;
            }
        }

        private static string? MapToAutoSubmittedHeaderValue(AutoGenerationType autoGenerationType)
            => autoGenerationType switch
            {
                AutoGenerationType.Unspecified => null,
                AutoGenerationType.AutoGenerated => "auto-generated",
                AutoGenerationType.AutoReplied => "auto-replied",
                _ => throw new InvalidOperationException($"Unsupported enum variant: {autoGenerationType}"),
            };

        private static void CopyAddressesToInternetAddressList(IEnumerable<MailboxAddress> source, InternetAddressList target)
            => MapToMimeKitMailboxAddresses(source).ForEach(target.Add);

        private static IEnumerable<MimeKitMailboxAddress> MapToMimeKitMailboxAddresses(IEnumerable<MailboxAddress> addresses)
            => addresses.Select(MapToMimeKitMailboxAddress);

        private static MimeKitMailboxAddress MapToMimeKitMailboxAddress(MailboxAddress address)
            => new MimeKitMailboxAddress(address.Name, address.Address);

        private static MimeKitContentType MapToMimeKitContentType(ContentType contentType)
            => MimeKitContentType.TryParse(contentType.ToString(), out var mimeKitContentType)
                ? mimeKitContentType
                : throw new InvalidOperationException("Unable to convert System ContentType to MimeKit ContentType");
    }
}
